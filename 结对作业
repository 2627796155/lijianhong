#include<stdio.h>
#include<iostream>
using namespace std;
#include<stdlib.h>
typedef struct Binode
{
	char a;
	Binode *lchild, *rchild;
}Binode, *Bitree; 

void Creat(Bitree &T, int &i)
{
	   char a, ch;
	cin >> a; getchar();
	if (a == '*')T = NULL;
	else
	{
		T = new Binode;
		T->a = a; i++;
		Creat(T->lchild, i);
		Creat(T->rchild, i);
	}
}
typedef struct Queue
{
	Bitree a;
	Queue *next;
}Queue;
typedef struct
{
	Queue *front, *rear;
}List;
void Init(List &Q)
{
	   Q.front = new Queue;
	Q.rear = Q.front;
	     Q.front->next = NULL;
}
void In(List &Q, Bitree &T)
{
	Queue *p;
	    p = new Queue;
	p->a = T;
	    Q.rear->next = p;
	Q.rear = p;p->next = NULL;
}
void Out(List &Q, Bitree &p)
{
	Q.front = Q.front->next;p = Q.front->a;
}
void cc(Bitree &T, char a[], int &t, int c)
{
	int i = 1, j = 1;
	List Q; Init(Q);
	Bitree p, q;
	q = new Binode;
	q->a = '*'; 
	q->lchild = NULL;
	q->rchild = NULL;
	p = T;
	In(Q, p); 
	a[i] = p->a;
	while (j != c)
	{
		i++;
		        Out(Q, p);
		if (p->lchild != NULL) 
		{ In(Q, p->lchild); a[i] = p->lchild->a; j++; 
		}
		else { In(Q, q); a[i] = q->a; }
		i++;
		if (p->rchild != NULL) {
			In(Q, p->rchild); 
			a[i] = p->rchild->a; 
			j++;
		}
		else     { In(Q, q); a[i] = q->a; }
	}
	t = i;
}
int main()
{
	int i = 0, t, a1, a2, r1, r2;
	char a[100], c1, c2, ch;
	Bitree T;
	Creat(T, i);
	cc(T, a, t, i);
	scanf("%c", &c1);
	ch = getchar();
	scanf("%c", &c2);
	for (i = 1; i <= t; i++)
	{
		if (c1 == a[i])a1 = i;
		if (c2 == a[i])a2 = i;
	}

	r1 = a1; r2 = a2;
	if (a1 == 1 || a2 == 1)
		printf("null");
	else
	{
		while (a1 != a2)
		{

			if (a1 > a2)
				a1 = a1 / 2;
			else
				a2 = a2 / 2;
		}
		if (a1 == r1 || a1 == r2)
			a1 = a1 / 2;
		printf("%c", a[a1]);
	}
	return 0;
}
